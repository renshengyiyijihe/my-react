(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory());
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag;
	    key;
	    type;
	    stateNode;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        this.ref = null;
	        this.stateNode = null;
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.pendingProps = pendingProps;
	        this.memoizedState = null;
	        this.memoizedProps = null;
	        this.alternate = null;
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.updateQueue = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let workInProgress = current.alternate;
	    if (workInProgress == null) {
	        // mount 首次
	        workInProgress = new FiberNode(current.tag, pendingProps, current.key);
	        workInProgress.stateNode = current.stateNode;
	        workInProgress.alternate = current;
	        current.alternate = workInProgress;
	    }
	    else {
	        // update
	        workInProgress.pendingProps = pendingProps;
	        workInProgress.flags = NoFlags;
	        workInProgress.subtreeFlags = NoFlags;
	    }
	    workInProgress.type = current.type;
	    workInProgress.updateQueue = current.updateQueue;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    return workInProgress;
	};
	const createFiberFromElement = (element) => {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type == 'string' || typeof type === 'number') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && __DEV__) {
	        console.warn('未定义的 type 类型 ->>', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	};

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ChildReconciler = (shouldTrackSideEffects) => {
	    const reconcileSingleElement = (returnFiber, currentFiber, element) => {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const reconcileSingleTextNode = (returnFiber, currentFiber, content) => {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const placeSingleChild = (fiber) => {
	        if (shouldTrackSideEffects && fiber.alternate == null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    };
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (newChild !== null && typeof newChild == 'object') {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    if (__DEV__) {
	                        console.warn('未实现的 reconcile 类型 ->> ', newChild);
	                    }
	                    break;
	            }
	        }
	        if (Array.isArray(newChild)) {
	            if (__DEV__) {
	                console.warn('未实现的 reconcile 类型', newChild);
	            }
	        }
	        if (typeof newChild == 'string' || typeof newChild == 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (__DEV__) {
	            console.warn('未实现的 reconcile 类型', newChild);
	        }
	        return null;
	    };
	};
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (workInProgress) => {
	    const tag = workInProgress.tag;
	    switch (tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress);
	        case HostComponent:
	            return updateHostComponent(workInProgress);
	        case HostText:
	            return updateHostText();
	        default:
	            if (__DEV__) {
	                console.warn('beginWork未实现类型', tag);
	            }
	            break;
	    }
	};
	const updateHostRoot = (workInProgress) => {
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    workInProgress.memoizedState = memoizedState;
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	};
	const updateHostComponent = (workInProgress) => {
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	};
	const updateHostText = (workInProgress) => {
	    return null;
	};
	const reconcileChildren = (workInProgress, children) => {
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        workInProgress.child = reconcileChildFibers(workInProgress, current?.child, children);
	    }
	    else {
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	};

	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    const element = document.createTextNode(content);
	    return element;
	};
	const appendChildToContainer = (child, parent) => {
	    parent.appendChild(child);
	};

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    if ((flags & Update) !== NoFlags) {
	        // TODO Update
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        // TODO ChildDeletion
	        finishedWork.flags &= ~ChildDeletion;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    if (__DEV__) {
	        console.log('执行 Placement 操作', finishedWork);
	    }
	    const hostParent = getHostParent(finishedWork);
	    console.log('hostParent', finishedWork, hostParent, hostParent !== null);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent !== null) {
	        const parentTag = parent.tag;
	        // Root节点
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        else {
	            parent = parent.return;
	        }
	    }
	    if (__DEV__) {
	        console.warn('未找到 host parent', fiber);
	    }
	    return null;
	};
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(finishedWork.stateNode, hostParent);
	    }
	    else {
	        const child = finishedWork.child;
	        if (child !== null) {
	            appendPlacementNodeIntoContainer(child, hostParent);
	            let sibling = child.sibling;
	            while (sibling !== null) {
	                appendPlacementNodeIntoContainer(sibling, hostParent);
	                sibling = sibling.sibling;
	            }
	        }
	    }
	};

	const completeWork = (workInProgress) => {
	    const newProps = workInProgress.pendingProps;
	    const current = workInProgress.alternate;
	    switch (workInProgress.tag) {
	        case HostRoot:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostComponent:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                // mount 首屏挂载
	                const instance = createInstance(workInProgress.type);
	                appendAllChildren(instance, workInProgress);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        case HostText:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                const instance = createTextInstance(newProps.content);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        default:
	            if (__DEV__) {
	                console.warn('completeWork未实现的 tag 类型 ->> ', workInProgress);
	            }
	            return null;
	    }
	};
	const appendAllChildren = (parent, workInProgress) => {
	    let node = workInProgress.child;
	    while (node !== null) {
	        if (node.tag == HostComponent || node.tag == HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node == workInProgress) {
	            return;
	        }
	        while (node.sibling == null) {
	            if (node.return === null || node.return === workInProgress) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const bubbleProperties = (workInProgress) => {
	    let subtreeFlags = NoFlags;
	    let child = workInProgress.child;
	    while (child != null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = workInProgress;
	        child = child.sibling;
	    }
	    workInProgress.subtreeFlags = subtreeFlags;
	};

	let workInProgress = null;
	const renderRoot = (root) => {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (err) {
	            console.error('renderRoot workLoop err ->>', err);
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	};
	const commitRoot = (root) => {
	    const finishedWork = root.finishedWork;
	    if (finishedWork == null)
	        return;
	    if (__DEV__)
	        console.log('commit start');
	    root.finishedWork = null;
	    const subtreeHasEffects = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffects = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffects || rootHasEffects) {
	        // TODO: BeforeMutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	    }
	    else {
	        root.current = finishedWork;
	    }
	};
	const prepareFreshStack = (root) => {
	    workInProgress = createWorkInProgress(root.current, {});
	};
	const workLoop = () => {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	};
	const performUnitOfWork = (fiber) => {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next == null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	};
	const completeUnitOfWork = (fiber) => {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling != null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	};
	const scheduleUpdateOnFiber = (fiber) => {
	    const root = markUpdateFromFiberToRoot(fiber);
	    debugger;
	    console.log('root', fiber, root);
	    renderRoot(root);
	};
	const markUpdateFromFiberToRoot = (fiber) => {
	    let node = fiber;
	    while (node.return !== null) {
	        node = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	};

	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            return updateContainer(element, root);
	        }
	    };
	};

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
