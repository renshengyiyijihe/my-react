(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag;
	    key;
	    type;
	    stateNode;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    deletions;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        this.ref = null;
	        this.stateNode = null;
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.pendingProps = pendingProps;
	        this.memoizedState = null;
	        this.memoizedProps = null;
	        this.alternate = null;
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.updateQueue = null;
	        this.deletions = null; // 指向待删除的子节点，用于在协调过程中进行删除
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let workInProgress = current.alternate;
	    if (workInProgress == null) {
	        // mount 首次
	        workInProgress = new FiberNode(current.tag, pendingProps, current.key);
	        workInProgress.stateNode = current.stateNode;
	        workInProgress.alternate = current;
	        current.alternate = workInProgress;
	    }
	    else {
	        // update
	        workInProgress.pendingProps = pendingProps;
	        workInProgress.flags = NoFlags;
	        workInProgress.subtreeFlags = NoFlags;
	    }
	    workInProgress.type = current.type;
	    workInProgress.updateQueue = current.updateQueue;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    return workInProgress;
	};
	const createFiberFromElement = (element) => {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type == 'string' || typeof type === 'number') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && __DEV__) {
	        console.warn('未定义的 type 类型 ->>', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	};

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ChildReconciler = (shouldTrackSideEffects) => {
	    const useFiber = (fiber, pendingProps) => {
	        const clone = createWorkInProgress(fiber, pendingProps);
	        clone.index = 0;
	        clone.sibling = null;
	        return clone;
	    };
	    const deleteChild = (returnFiber, childToDelete) => {
	        if (!shouldTrackSideEffects)
	            return;
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    };
	    const reconcileSingleElement = (returnFiber, currentFiber, element) => {
	        // update
	        if (currentFiber !== null) {
	            if (currentFiber.key === element.key) {
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        const existing = useFiber(currentFiber, element.props);
	                        existing.return = returnFiber;
	                        return existing;
	                    }
	                    deleteChild(returnFiber, currentFiber);
	                }
	                else {
	                    if (__DEV__) {
	                        console.warn('还未实现的 React 类型', element);
	                    }
	                }
	            }
	            else {
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const reconcileSingleTextNode = (returnFiber, currentFiber, content) => {
	        // update
	        if (currentFiber !== null) {
	            if (currentFiber.tag === HostText) {
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                return existing;
	            }
	            else {
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const placeSingleChild = (fiber) => {
	        if (shouldTrackSideEffects && fiber.alternate == null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    };
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (newChild !== null && typeof newChild == 'object') {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    if (__DEV__) {
	                        console.warn('未实现的 reconcile 类型 ->> ', newChild);
	                    }
	                    break;
	            }
	        }
	        if (Array.isArray(newChild)) {
	            if (__DEV__) {
	                console.warn('未实现的 reconcile 类型', newChild);
	            }
	        }
	        if (typeof newChild == 'string' || typeof newChild == 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (__DEV__) {
	            console.warn('未实现的 reconcile 类型', newChild);
	        }
	        return null;
	    };
	};
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	const { currentDispatcher } = internals;
	// 当前正在处理的 FiberNode
	let currentlyRenderingFiber = null;
	// Hooks 链表中当前正在处理的 Hook
	let workInProgressHook = null;
	let currentHook = null;
	const renderWithHooks = (workInProgress) => {
	    if (__DEV__) {
	        console.log('renderWidthHooks start ->>', workInProgress.alternate);
	    }
	    currentlyRenderingFiber = workInProgress;
	    workInProgress.memoizedState = null;
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    console.log('currentDispatcher', currentDispatcher, currentDispatcher.current, JSON.stringify(currentDispatcher.current));
	    const Component = workInProgress.type;
	    const props = workInProgress.pendingProps;
	    const children = Component(props);
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    return children;
	};
	const HooksDispatcherOnMount = {
	    useState: mountState
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState
	};
	function mountState(initialState) {
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    hook.memoizedState = memoizedState;
	    const queue = createUpdateQueue();
	    hook.queue = queue;
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, 
	    // @ts-ignore
	    queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	const mountWorkInProgressHook = () => {
	    const hook = {
	        memoizedState: null,
	        queue: null,
	        next: null
	    };
	    if (workInProgressHook == null) {
	        if (currentlyRenderingFiber !== null) {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	        else {
	            throw new Error('Hooks 只能在函数组件中执行');
	        }
	    }
	    else {
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	};
	function dispatchSetState(fiber, updateQueue, action) {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber);
	}
	function updateState() {
	    if (__DEV__) {
	        console.log('updateState start');
	    }
	    const hook = updateWorkInProgressHook();
	    const queue = hook.queue;
	    const pending = queue.shared.pending;
	    if (pending !== null) {
	        const { memoizedState } = processUpdateQueue(hook.memoizedState, pending);
	        hook.memoizedState = memoizedState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function updateWorkInProgressHook() {
	    let nextCurrentHook;
	    // 这是函数组件 update 时的第一个 hook
	    if (currentHook === null) {
	        let current = currentlyRenderingFiber.alternate;
	        if (current === null) {
	            nextCurrentHook = null;
	        }
	        else {
	            nextCurrentHook = current.memoizedState;
	        }
	    }
	    else {
	        nextCurrentHook = currentHook.next;
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        queue: currentHook.queue,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        if (currentlyRenderingFiber !== null) {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	        else {
	            throw new Error('Hooks 只能在函数组件中执行');
	        }
	    }
	    else {
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}

	const beginWork = (workInProgress) => {
	    const tag = workInProgress.tag;
	    switch (tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress);
	        case HostComponent:
	            return updateHostComponent$1(workInProgress);
	        case FunctionComponent:
	            return updateFunctionComponent(workInProgress);
	        case HostText:
	            return updateHostText$1();
	        default:
	            if (__DEV__) {
	                console.warn('beginWork未实现类型', tag);
	            }
	            break;
	    }
	};
	const updateHostRoot = (workInProgress) => {
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    workInProgress.memoizedState = memoizedState;
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	};
	const updateHostComponent$1 = (workInProgress) => {
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	};
	const updateFunctionComponent = (workInProgress) => {
	    console.log('updateFunctionComponent', workInProgress);
	    const nextChildren = renderWithHooks(workInProgress);
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	};
	const updateHostText$1 = (workInProgress) => {
	    return null;
	};
	const reconcileChildren = (workInProgress, children) => {
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        workInProgress.child = reconcileChildFibers(workInProgress, current?.child, children);
	    }
	    else {
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	};

	const validEventTypeList = ['click'];
	const elementPropsKey = '__props';
	function initEvent(container, eventType) {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('initEvent 未实现的事件类型 ->>', eventType);
	        return;
	    }
	    if (__DEV__) {
	        console.log('initEvent, container, eventType ->> ', container, eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	}
	function updateFiberProps(node, props) {
	    node[elementPropsKey] = props;
	}
	function dispatchEvent(container, eventType, e) {
	    const targetElement = e.target;
	    if (targetElement == null) {
	        console.warn('事件不存在 targetElement ->>', e);
	        return;
	    }
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    const syntheticEvent = createSyntheticEvent(e);
	    triggerEventFlow(capture, syntheticEvent);
	    if (!syntheticEvent.__stopPropagation) {
	        triggerEventFlow(bubble, syntheticEvent);
	    }
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        capture: [],
	        bubble: []
	    };
	    while (targetElement !== null && targetElement !== container) {
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const callback = elementProps[callbackName];
	                    if (callback) {
	                        if (i == 0) {
	                            paths.capture.unshift(callback);
	                        }
	                        else {
	                            paths.bubble.push(callback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClickCapture', 'onClick']
	    }[eventType];
	}
	function createSyntheticEvent(e) {
	    const syntheticEvent = e;
	    syntheticEvent.__stopPropagation = false;
	    const originStopPropagation = e.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        if (originStopPropagation) {
	            originStopPropagation();
	        }
	    };
	    return syntheticEvent;
	}
	function triggerEventFlow(paths, syntheticEvent) {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        callback.call(null, syntheticEvent);
	        if (syntheticEvent.__stopPropagation) {
	            break;
	        }
	    }
	}

	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    const element = document.createTextNode(content);
	    return element;
	};
	const appendChildToContainer = (child, parent) => {
	    parent.appendChild(child);
	};
	const commitUpdate = (fiber) => {
	    const tag = fiber.tag;
	    switch (tag) {
	        case HostComponent:
	            return updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        case FunctionComponent:
	            return updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	        default:
	            if (__DEV__) {
	                console.warn('未实现的 commitUpdate 类型 ->> ', fiber);
	            }
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.textContent = content;
	};
	const removeChild = (child, parent) => {
	    parent.removeChild(child);
	};

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((deletion) => {
	                commitDeletion(deletion);
	            });
	        }
	        finishedWork.flags &= ~ChildDeletion;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    if (__DEV__) {
	        console.log('执行 Placement 操作', finishedWork);
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	const commitDeletion = (childToDelete) => {
	    if (__DEV__) {
	        console.log('执行 Deletion 操作 ->> ', childToDelete);
	    }
	    let rootHostNode = null;
	    commitNestedUnmounts(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO unmount ref
	                return;
	            case HostText:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                return;
	            case FunctionComponent:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO unmount ref
	                return;
	            default:
	                if (__DEV__) {
	                    console.warn('未实现的 commitDeletion 类型 ->> ', unmountFiber);
	                }
	        }
	    });
	    if (rootHostNode !== null) {
	        const hostParent = getHostParent(rootHostNode);
	        removeChild(rootHostNode.stateNode, hostParent);
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	};
	const commitNestedUnmounts = (root, onCommitUnmount) => {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root)
	            return;
	        while (node.sibling === null) {
	            if (node.return == null || node.return === root)
	                return;
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent !== null) {
	        const parentTag = parent.tag;
	        // Root节点
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        else {
	            parent = parent.return;
	        }
	    }
	    if (__DEV__) {
	        console.warn('未找到 host parent', fiber);
	    }
	    return null;
	};
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(finishedWork.stateNode, hostParent);
	    }
	    else {
	        const child = finishedWork.child;
	        if (child !== null) {
	            appendPlacementNodeIntoContainer(child, hostParent);
	            let sibling = child.sibling;
	            while (sibling !== null) {
	                appendPlacementNodeIntoContainer(sibling, hostParent);
	                sibling = sibling.sibling;
	            }
	        }
	    }
	};

	const completeWork = (workInProgress) => {
	    const newProps = workInProgress.pendingProps;
	    const current = workInProgress.alternate;
	    switch (workInProgress.tag) {
	        case HostRoot:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostComponent:
	            if (current !== null && workInProgress.stateNode !== null) {
	                // update
	                updateHostComponent(current, workInProgress);
	            }
	            else {
	                // mount 首屏挂载
	                const instance = createInstance(workInProgress.type, newProps);
	                appendAllChildren(instance, workInProgress);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostText:
	            if (current !== null && workInProgress.stateNode !== null) {
	                // update
	                updateHostText(current, workInProgress);
	            }
	            else {
	                const instance = createTextInstance(newProps.content);
	                workInProgress.stateNode = instance;
	            }
	            bubbleProperties(workInProgress);
	            return null;
	        default:
	            if (__DEV__) {
	                console.warn('completeWork未实现的 tag 类型 ->> ', workInProgress);
	            }
	            return null;
	    }
	};
	const appendAllChildren = (parent, workInProgress) => {
	    let node = workInProgress.child;
	    while (node !== null) {
	        if (node.tag == HostComponent || node.tag == HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node == workInProgress) {
	            return;
	        }
	        while (node.sibling == null) {
	            if (node.return === null || node.return === workInProgress) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const bubbleProperties = (workInProgress) => {
	    let subtreeFlags = NoFlags;
	    let child = workInProgress.child;
	    while (child != null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = workInProgress;
	        child = child.sibling;
	    }
	    workInProgress.subtreeFlags = subtreeFlags;
	};
	const updateHostText = (current, workInProgress) => {
	    const oldText = current.memoizedProps.content;
	    const newText = workInProgress.pendingProps.content;
	    if (oldText !== newText) {
	        markUpdate(workInProgress);
	    }
	};
	const updateHostComponent = (current, workInProgress) => {
	    markUpdate(workInProgress);
	};
	const markUpdate = (workInProgress) => {
	    workInProgress.flags |= Update;
	};

	let workInProgress = null;
	const renderRoot = (root) => {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (err) {
	            console.error('renderRoot workLoop err ->>', err);
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	};
	const commitRoot = (root) => {
	    const finishedWork = root.finishedWork;
	    if (finishedWork == null)
	        return;
	    if (__DEV__)
	        console.log('commit start');
	    root.finishedWork = null;
	    const subtreeHasEffects = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffects = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffects || rootHasEffects) {
	        // TODO: BeforeMutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	    }
	    else {
	        root.current = finishedWork;
	    }
	};
	const prepareFreshStack = (root) => {
	    workInProgress = createWorkInProgress(root.current, {});
	};
	const workLoop = () => {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	};
	const performUnitOfWork = (fiber) => {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next == null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	};
	const completeUnitOfWork = (fiber) => {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling != null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	};
	const scheduleUpdateOnFiber = (fiber) => {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	};
	const markUpdateFromFiberToRoot = (fiber) => {
	    let node = fiber;
	    while (node.return !== null) {
	        node = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	};

	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	};

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
